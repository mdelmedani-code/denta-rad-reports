import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Save, Loader2, Palette, Upload, Eye } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

interface PDFTemplate {
  id: string;
  name: string;
  logo_url: string | null;
  company_name: string;
  company_address: string | null;
  primary_color: string;
  secondary_color: string;
  font_family: string;
  header_text: string;
  footer_text: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

const PDFTemplateSettings = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const [template, setTemplate] = useState<PDFTemplate | null>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [previewing, setPreviewing] = useState(false);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);

  useEffect(() => {
    fetchTemplate();
  }, []);

  const fetchTemplate = async () => {
    try {
      const { data, error } = await supabase
        .from('pdf_templates')
        .select('*')
        .eq('is_active', true)
        .single();

      if (error) throw error;
      setTemplate(data);
    } catch (error: any) {
      console.error('Error fetching template:', error);
      toast({
        title: "Error",
        description: "Failed to load PDF template settings",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    if (!template) return;

    setSaving(true);
    try {
      const { error } = await supabase
        .from('pdf_templates')
        .update({
          name: template.name,
          company_name: template.company_name,
          company_address: template.company_address,
          primary_color: template.primary_color,
          secondary_color: template.secondary_color,
          font_family: template.font_family,
          header_text: template.header_text,
          footer_text: template.footer_text,
        })
        .eq('id', template.id);

      if (error) throw error;

      toast({
        title: "Settings saved",
        description: "PDF template settings have been updated successfully",
      });
    } catch (error: any) {
      console.error('Error saving template:', error);
      toast({
        title: "Error",
        description: "Failed to save template settings",
        variant: "destructive",
      });
    } finally {
      setSaving(false);
    }
  };

  const handleLogoUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file || !template) return;

    setUploading(true);
    try {
      const fileExt = file.name.split('.').pop();
      const fileName = `logo_${Date.now()}.${fileExt}`;

      const { error: uploadError } = await supabase.storage
        .from('reports')
        .upload(fileName, file);

      if (uploadError) throw uploadError;

      const { data } = supabase.storage
        .from('reports')
        .getPublicUrl(fileName);

      setTemplate({
        ...template,
        logo_url: data.publicUrl
      });

      toast({
        title: "Logo uploaded",
        description: "Company logo has been uploaded successfully",
      });
    } catch (error: any) {
      console.error('Error uploading logo:', error);
      toast({
        title: "Error",
        description: "Failed to upload logo",
        variant: "destructive",
      });
    } finally {
      setUploading(false);
    }
  };

  const generatePreview = async () => {
    if (!template) return;

    setPreviewing(true);
    try {
      toast({
        title: "Generating preview...",
        description: "Please wait while we create your PDF preview",
      });

      const { data, error } = await supabase.functions.invoke('generate-pdf-report', {
        body: {
          reportId: 'preview',
          caseData: {
            patient_name: 'John Doe (Preview)',
            field_of_view: 'up_to_8x8',
            urgency: 'standard',
            clinical_question: 'This is a preview of how your PDF template will look with actual case data.',
            upload_date: new Date().toISOString()
          },
          reportText: 'This is a sample diagnostic report to demonstrate how your PDF template will appear. The actual report content will be generated by our AI system based on the case details and clinical findings.',
          templateId: template.id
        }
      });

      if (error) throw error;

      if (data?.pdfUrl) {
        setPreviewUrl(data.pdfUrl);
        toast({
          title: "Preview ready",
          description: "Click 'Open Preview' below to view or download the PDF.",
        });
      } else {
        throw new Error('No PDF URL received');
      }
    } catch (error: any) {
      console.error('Error generating preview:', error);
      toast({
        title: "Error",
        description: error.message || "Failed to generate preview",
        variant: "destructive",
      });
    } finally {
      setPreviewing(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  if (!template) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">No template found</h2>
          <Button onClick={() => navigate('/admin')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Admin
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <Button 
            variant="ghost" 
            onClick={() => navigate('/admin')}
            className="flex items-center"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Admin Dashboard
          </Button>
          
          <Badge variant="secondary">
            <Palette className="w-4 h-4 mr-1" />
            PDF Template Settings
          </Badge>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Company Branding */}
          <Card>
            <CardHeader>
              <CardTitle>Company Branding</CardTitle>
              <CardDescription>
                Configure your company information and branding
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="company_name">Company Name</Label>
                <Input
                  id="company_name"
                  value={template.company_name}
                  onChange={(e) => setTemplate({...template, company_name: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="company_address">Company Address</Label>
                <Textarea
                  id="company_address"
                  value={template.company_address || ''}
                  onChange={(e) => setTemplate({...template, company_address: e.target.value})}
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="logo_upload">Company Logo</Label>
                <div className="flex items-center gap-2">
                  <Input
                    id="logo_upload"
                    type="file"
                    accept="image/*"
                    onChange={handleLogoUpload}
                    disabled={uploading}
                  />
                  {uploading && <Loader2 className="w-4 h-4 animate-spin" />}
                </div>
                {template.logo_url && (
                  <div className="mt-2">
                    <img 
                      src={template.logo_url} 
                      alt="Company logo" 
                      className="h-16 w-auto border rounded"
                    />
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Design & Styling */}
          <Card>
            <CardHeader>
              <CardTitle>Design & Styling</CardTitle>
              <CardDescription>
                Customize colors and typography
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="primary_color">Primary Color</Label>
                <div className="flex items-center gap-2">
                  <Input
                    id="primary_color"
                    type="color"
                    value={template.primary_color}
                    onChange={(e) => setTemplate({...template, primary_color: e.target.value})}
                    className="w-16 h-10"
                  />
                  <Input
                    value={template.primary_color}
                    onChange={(e) => setTemplate({...template, primary_color: e.target.value})}
                    className="flex-1"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="secondary_color">Secondary Color</Label>
                <div className="flex items-center gap-2">
                  <Input
                    id="secondary_color"
                    type="color"
                    value={template.secondary_color}
                    onChange={(e) => setTemplate({...template, secondary_color: e.target.value})}
                    className="w-16 h-10"
                  />
                  <Input
                    value={template.secondary_color}
                    onChange={(e) => setTemplate({...template, secondary_color: e.target.value})}
                    className="flex-1"
                  />
                </div>
              </div>

              <div>
                <Label htmlFor="font_family">Font Family</Label>
                <select
                  id="font_family"
                  value={template.font_family}
                  onChange={(e) => setTemplate({...template, font_family: e.target.value})}
                  className="w-full px-3 py-2 border border-input rounded-md bg-background"
                >
                  <option value="Arial, sans-serif">Arial</option>
                  <option value="Helvetica, sans-serif">Helvetica</option>
                  <option value="Georgia, serif">Georgia</option>
                  <option value="Times New Roman, serif">Times New Roman</option>
                  <option value="Calibri, sans-serif">Calibri</option>
                </select>
              </div>
            </CardContent>
          </Card>

          {/* Content Settings */}
          <Card className="lg:col-span-2">
            <CardHeader>
              <CardTitle>Content Settings</CardTitle>
              <CardDescription>
                Configure header and footer text for your reports
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="header_text">Header Text</Label>
                <Input
                  id="header_text"
                  value={template.header_text}
                  onChange={(e) => setTemplate({...template, header_text: e.target.value})}
                />
              </div>

              <div>
                <Label htmlFor="footer_text">Footer Text</Label>
                <Textarea
                  id="footer_text"
                  value={template.footer_text}
                  onChange={(e) => setTemplate({...template, footer_text: e.target.value})}
                  rows={3}
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-between mt-6">
          <Button
            variant="outline"
            onClick={generatePreview}
            disabled={previewing}
          >
            {previewing ? (
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Eye className="w-4 h-4 mr-2" />
            )}
            {previewing ? 'Generating...' : 'Preview Template'}
          </Button>

          <Button
            onClick={handleSave}
            disabled={saving}
          >
            {saving ? (
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            ) : (
              <Save className="w-4 h-4 mr-2" />
            )}
            {saving ? 'Saving...' : 'Save Settings'}
          </Button>
        </div>

        {previewUrl && (
          <div className="mt-4 p-3 border border-border rounded bg-muted/30">
            <p className="mb-2 text-sm text-muted-foreground">Preview ready:</p>
            <div className="flex flex-wrap gap-2 items-center">
              <a
                href={previewUrl}
                target="_blank"
                rel="noopener noreferrer"
                className="underline text-primary hover:text-primary/80"
              >
                Open Preview in new tab
              </a>
              <Button
                variant="outline"
                onClick={() => {
                  const link = document.createElement('a');
                  link.href = previewUrl;
                  link.download = `template-preview-${Date.now()}.pdf`;
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
                }}
              >
                Download PDF
              </Button>
              <Button
                variant="ghost"
                onClick={() => {
                  navigator.clipboard.writeText(previewUrl);
                  toast({ title: 'Link copied', description: 'PDF preview link copied to clipboard' });
                }}
              >
                Copy Link
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PDFTemplateSettings;